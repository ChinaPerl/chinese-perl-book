=encoding utf8

=head1 NAME

Book::Chinese::MasterPerlToday::Catalyst - Catalyst Framework

=head1 DESCRIPTION

本章主要介绍如何使用 L<Catalyst> 来构建一个程序。

    cpan> install Catalyst::Runtime
    cpan> install Catalyst::Devel
    cpan> install Catalyst::Manual

详尽的文档请参阅 L<Catalyst::Manual>

=head2 前言

所有模块或工具的用意都在于简化您任务所需的代码。

L<Catalyst> 采用当前最流行的 MVC 结构。

=over 4

=item * V(View)

MVC 中的 V 是比较清晰的，输出可以是直接的文本($c->res->body)，可以是 HTML(如 L<Catalyst::View::TT>), 可以是 RSS, 或者是 JSON 或其他的（如 Wx 等 GUI）。所有的输出都是经过 ->res->body 或 ->res->write, 最终由 Catalyst::Engine::* 来渲染。

=item * M(Model)

Catalyst 中的 M 是瘦 Model. 常见的通过 L<Catalyst::Model::DBIC::Schema> 和 L<Catalyst::Model::Adaptor> 来加载外部 Model. 使用这种方法的好处是：真正的 L<DBIx::Class> 结构 ORM 或其他模块可以作为 Catalyst Model，也可以被 cron 等外部 pl 脚本使用。

=item * C(Controller)

Controller 与 Model 是最容易混淆的结构。有些代码你不知道放 Model 里还是放 Controller 里好。个人浅见，以该代码是否可以被外部 pl 程序调用来决定放哪里。

Controller 最大的用处是定义一系列的 URI 和通过 params 或 Model 的返回值来确定使用采用什么 action。简而言之，连接 Model 和 View 的一个桥梁。

=back

=head2 扩展 Catalyst

参阅 L<Catalyst::Manual::ExtendingCatalyst>, L<Catalyst::Manual::Internals>, L<Catalyst::Manual::Plugins>

=head3 Plugin

Plugin 在 5.80 以前（乃至现在）是使用最广的一种扩展方式，虽然有些 plugin 其实没必要成为一个 plugin。

Plugin 通过更新 Catalyst 流程中的某些子程序，或者给 $c 添加一些函数。

通常更改 Catalyst 流程的 plugin 是值得的。但是如果仅仅是方便调用，给 $c 添加某个函数，是非常没有必要成为一个 plugin 的。

=over 4

Catalyst 的整个流程包括两个部分。

=item * setup

一个是 setup 部分，在 Catalyst 启动的时候调用一次。

    setup
      setup_home
      setup_log
      setup_plugins
      setup_dispatcher
      setup_engine
      setup_stats
      setup_components
      setup_actions
      setup_finalize

上述 setup_* 函数我们一般不进行改动，如果自定义的 Plugin 需要在启动的时候检查 config 或做一些初始化的话，一般直接改 sub setup

  use MRO::Compat;
  sub setup {
    my $c = shift;

    $c->maybe::next::method(@_);
    $c->setup_my_plugin_stuff;
  }

上述 setup plugin 例子有 L<Catalyst::Plugin::ConfigLoader>, L<Catalyst::Plugin::I18N> 等

L<Catalyst::Plugin::Server> 使用了 setup_dispatcher

=item * request

另一个是 request 部分，每个 url 的 request 都调用一次。

    handle_request
      prepare
        prepare_request
        prepare_connection
        prepare_query_parameters
        prepare_headers
        prepare_cookies
        prepare_path
        prepare_body (unless parse_on_demand)
          prepare_body_parameters
          prepare_parameters
          prepare_uploads
        prepare_action
      dispatch
      finalize
        finalize_uploads
        finalize_error (if one happened)
        finalize_headers
          finalize_cookies
        finalize_body

这种 plugin 很多。

L<Catalyst::Plugin::PageCache> 使用 dispatch+finalize

L<Catalyst::Plugin::Unicode> 使用 prepare_parameters+finalize

=back

=head3 Controller/View/Model

这种类型的扩展一般用于被 use base 或 use parent

=over 4

=item * View

View 是最常见的一种扩展，最常用的如 L<Catalyst::View::TT>, L<Catalyst::View::JSON>, TT::Alloy, PHP, Mason, Template::Declare, GraphViz, GD 等。所有的 View 扩展都基于 L<Catalyst::View>, 它们都覆盖 sub process, 并且在函数最后用 $c->res->body 输出内容。

=item * Model

Model 的扩展不多，最常用的当然是 L<Catalyst::Model::DBIC::Schema> 和 L<Catalyst::Model::Adaptor>. 大部分的 Model 都跟 storage 有关。

所有的 Model 扩展语法跟我们平常写的并无任何区别，所不同的仅仅在于公用性。

写 Model 扩展的时候，有时候我们会用到 L<Catalyst::Component::InstancePerContext>, 该模块是对 B<ACCEPT_CONTEXT> 的一个技巧应用。当你的模块需要在每个 request 里都应用一些代码时非常有用。

=item * Controller

Controller 的模块并不多，毕竟共享的 Controller 内容很窄。更多的我们将在下文中讲到。

最有名气的当属 L<Catalyst::Controller::WrapCGI> 该模块能让 cgi 脚本运行在 Catalyst 里，这将有助于你的计划安排，你可以在以后恰当的时间将该 cgi 改为 Catalyst

另一个是 L<Catalyst::Controller::REST>, 极大的简化 REST 工作。

=back

=head3 ActionClass

Action 类似于 L<Moose> 的 C<around>, 最常见的 ActionClass 是 L<Catalyst::Action::RenderView>

所有的 Action 都基于 L<Catalyst::Action> 并且需要 sub execute, 原始的 sub 调用通过 L<MRO::Compat>, 大致类似

  sub execute {
    my $self = shift;
    my ($controller, $c ) = @_;
    
    $self->next::method( @_ );

$self->next::method( @_ ); 可以放到 sub execute 的任何地方。这意味你可以在原始 sub 之前写代码也可以在其之后。

=head3 Controller 属性

=head2 FAQ

=over 4

=item * auto 中怎么用 $c->detach 不好使？

    if ( $bla ) {
        $c->forward('/where/some');
        return 0;
    }
    return 1;

在 sub auto 中，return 值是非常重要的。return 0 就直接去 sub end 了。

=item * param 和 params

    use Data::Dumper;
    sub test_params :Path('test_params') {
        my ($self, $c) = @_;
       
        my $test = {
            a => $c->req->param('a'),
            b => $c->req->param('b'),
            c => $c->req->param('c'),
        };
        $c->res->body(Dumper(\$test));
    }

当 DBIx::Class ->create 的时候，上文这种格式还是比较常见的。但是这种格式返回的结果可能会让你大吃一惊。

    E:\Fayland\chinese-perl-book\eg\Catalyst\TestApp>perl script/testapp_test.pl /test_params?b=1
    # 省略输出
    $VAR1 = \{
            '1' => 'c',
            'a' => 'b'
          };

快速的修正可以使用 params

    sub test_params2 :Path('test_params2') {
        my ($self, $c) = @_;
       
        my $test = {
             a => $c->req->params->{'a'},
             b => $c->req->params->{'b'},
             c => $c->req->params->{'c'},
        };
        $c->res->body(Dumper(\$test));
    }

    E:\Fayland\chinese-perl-book\eg\Catalyst\TestApp>perl script/testapp_test.pl /test_params2?b=1
    # 省略输出
    $VAR1 = \{
            'c' => undef,
            'a' => undef,
            'b' => '1'
          };

=back

=head2 资源

=over 4

=item * 主页：L<http://www.catalystframework.org/>

=item * Wiki: L<http://dev.catalystframework.org/wiki/>

=item * 邮件列表：L<http://lists.scsys.co.uk/mailman/listinfo/catalyst/>

=item * 一年一度的 Advent: L<http://dev.catalystframework.org/wiki/adventcalendararticles>

=item * IRC: irc.perl.org#catalyst

=back

=head1 AUTHOR

Fayland Lam, C<< <fayland at gmail.com> >>

=head1 COPYRIGHT & LICENSE

Copyright (c) 2009 Fayland Lam

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
